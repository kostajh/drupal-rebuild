<?php

/**
 * @file
 * A utility for rebuilding a local Drupal site environment using Drush.
 */

namespace DrupalRebuild;

use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Exception\ParseException;
use Symfony\Component\Console\Output\OutputInterface;
use DrupalRebuild\Drush\Drush;
use DrupalRebuild\Steps\DrushScript;

class DrupalRebuild
{

    public $config;
    public $environment;
    public $target;
    public $outputHandler;
    public $drush;

    public function __construct()
    {
        $this->drush = new Drush();
    }

    public function init($target)
    {
        $this->setTarget($target);
        if (!$this->setEnvironment()) {
            return false;
        }
        if (!$this->setConfig()) {
            return false;
        }
    }

    public function run()
    {
        // Call processes.
        // Pre process scripts.
        $this->DrushScript('pre_process');
        // Post process scripts.
        $this->DrushScript('post_process');
    }

    public function drushScript($state)
    {
        if ($state == 'pre_process') {
            $target = '@none';
            $step = 'Drush Script - Pre Process';
        } else {
            $target = $this->target;
            $step = 'Drush Script - Post Process';
        }
        // Get scripts.
        $scripts = isset($this->config['drush_scripts'][$state]) ? $this->config['drush_scripts'][$state] : array();
        if (!$scripts) {
            return;
        }
        foreach ($scripts as $script) {
            $rebuild_filepath = $this->environment['path-aliases']['%rebuild'];
            $file = str_replace(basename($rebuild_filepath), $script, $rebuild_filepath);
            if (file_exists($file)) {
                $this->outputHandler->writeln(sprintf('<info>Executing script \'%s\'', $script));
                $this->drush->runCommand($target, 'php-script', array($file));
                $backend_output = $this->drush->getParsedBackendOutput();
                if ($backend_output) {
                    $this->outputResults(sprintf('<comment>%s</comment>', $backend_output['output']), $step);
                }
                $this->outputResults(sprintf('<info>Successfully executed script \'%s\'<info>', $script), $step);
            } else {
                $this->outputHandler(sprintf('Failed to load script %s', $script), 'error');
            }

        }
    }

    public function outputResults($message, $step)
    {
        if ($this->drush->getErrorStatus() === 0) {
            return $this->writeOutput($message, 'info');
        } else {
            return $this->outputErrors($step);
        }
    }

    public function outputErrors($step)
    {
        if ($error_log = $this->drush->getErrorLog()) {
            // Show error.
            foreach ($error_log as $type => $error) {
                $errors[$type] = array_shift($error);
            }
            $this->writeOutput(sprintf("ERROR: Rebuild failed on '%s'", $step), 'error');
            $this->writeOutput(implode("\n", $errors), 'error');
        }
        return false;
    }


    /**
    * Load the rebuild info config.
    *
    * @return array
    *   An array generated by parsing the rebuild info file.
    */
    public function getConfig()
    {
        return $this->config;
    }

    public function setConfig()
    {
        $env = $this->getEnvironment();
        $rebuild_config_path = $env['path-aliases']['%rebuild'];
        // Check if the file exists.
        if (!file_exists($rebuild_config_path)) {
            // return error.
        }

        // Check if file is YAML format.
        $yaml = new Parser();
        try {
            $config = $yaml->parse(file_get_contents($rebuild_config_path));
            // Allow overriding the default target.
            $config['general']['target'] = $this->target;
            // Load overrides.
            $this->config = $config;
            $this->setConfigOverrides();
            return $this;
        } catch (ParseException $e) {
            // drush_set_error(dt("Unable to parse the YAML string: %s", array('%s' => $e->getMessage())));
        }

        return true;
    }

    public function setTarget($target)
    {
        $this->target = $target;
    }

    public function setEnvironment()
    {
        $this->drush->runCommand('@none', 'site-alias', array($this->getTarget()));
        if ($this->drush->getErrorStatus() == 1) {
            $output = $this->getOutputHandler();
            $output->writeln(sprintf('<error>%s</error>', $this->drush->getErrorLogString()));
            return false;
        }
        $backend_output = $this->drush->getParsedBackendOutput();
        $this->environment = array_shift($backend_output['object']);
        return true;
    }

    protected function getConfigOverridesPath()
    {
        $rebuild_config = $this->getConfig();
        // Check if the overrides file is defined as a full path.
        if (file_exists($rebuild_config['general']['overrides'])) {
            return $rebuild_config['general']['overrides'];
        }
        // If not a full path, check if it is in the same directory with the main
        // rebuild mainfest.
        $rebuild_config_path = $this->environment['path-aliases']['%rebuild'];
        // Get directory of rebuild.info
        $rebuild_conf_dir = str_replace(basename($this->environment['path-aliases']['%rebuild']), '', $rebuild_config_path);
        if (file_exists($rebuild_conf_dir . '/' . $rebuild_config['general']['overrides'])) {
            return $rebuild_conf_dir . '/' . $rebuild_config['general']['overrides'];
        }
        // Could not find the file, return FALSE.
        return false;
    }

    public function setConfigOverrides()
    {
        $rebuild_config = $this->config;
        if (!isset($rebuild_config['general']['overrides'])) {
            return;
        }
        if ($overrides_path = $this->getConfigOverridesPath()) {
            $yaml = new Parser();
            if ($rebuild_overrides = $yaml->parse(file_get_contents($overrides_path))) {
                // drush_log(dt('Loading config overrides from !file', array('!file' => $rebuild_config['general']['overrides'])), 'success');
                $rebuild_config = array_merge_recursive($rebuild_config, $rebuild_overrides);
                $this->setConfig($rebuild_config);
                return true;
            } else {
                // return drush_set_error(dt('Failed to load overrides file! Check that it is valid YAML format.'));
            }
        } else {
            // return drush_set_error(dt('Could not load the overrides file.'));
        }
    }

    public function setOutputHandler($output)
    {
        $this->outputHandler = $output;
    }

    public function writeOutput($message, $type)
    {
        $type_start = sprintf('<%s>', $type);
        $type_end = sprintf('</%s>', $type);
        $output = $this->getOutputHandler();
        $output->writeln(sprintf('%s%s%s', $type_start, $message, $type_end));
        return true;
    }

    public function getTarget()
    {
        return $this->target;
    }

    public function getEnvironment()
    {
        return $this->environment;
    }

    public function getOutputHandler()
    {
        return $this->outputHandler;
    }

    public function getDrush()
    {
        return $this->drush;
    }
}
