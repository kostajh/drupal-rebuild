<?php

/**
 * @file
 * A utility for rebuilding a local Drupal site environment using Drush.
 */

namespace DrupalRebuild;

use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Exception\ParseException;
use Symfony\Component\Console\Output\OutputInterface;
use DrupalRebuild\Drush\Drush;
use DrupalRebuild\Steps\DrushScript;

class DrupalRebuild
{

    public static $config = array();
    public static $environment = array();
    public static $target;
    public static $outputHandler;
    public static $drush;

    public function __construct()
    {
        self::$drush = new Drush();
    }

    public function initialize($target)
    {
        $this->setTarget($target);
        if (!$this->setEnvironment()) {
            return false;
        }
        if (!$this->setConfig()) {
            return false;
        }
        return true;
    }

    public function run()
    {
        // Call processes.
        // Pre process scripts.
        $drush_script = new DrushScript('pre_process');
        if (!$drush_script->run()) {
            return false;
        }
        // Site install.
        $this->doSiteInstall();
        // SQL Sync
        $this->doSqlSync();
        // Rsync
        $this->doRsync();
        // Variables
        $this->doVariables();
        // Modules
        $this->doModules();
        // Permissions
        $this->doPermissions();
        // Post process scripts.
        $drush_script = new DrushScript('post_process');

        // User login.
        $this->doUserLogin();
    }

    public function doSiteInstall()
    {

    }

    public function doSqlSync()
    {

    }

    public function doRsync()
    {

    }

    public function doVariables()
    {

    }

    public function doModules()
    {

    }

    public function doPermissions()
    {

    }

    public function doUserLogin()
    {

    }

    public function outputResults($message, $step)
    {
        if (self::$drush->getErrorStatus() === 0) {
            return $this->writeOutput($message, 'info');
        } else {
            return $this->outputErrors($step);
        }
    }

    public function outputErrors($step)
    {
        if ($error_log = self::$drush->getErrorLog()) {
            // Show error.
            foreach ($error_log as $type => $error) {
                $errors[$type] = array_shift($error);
            }
            $this->writeOutput(sprintf("ERROR: Rebuild failed on '%s'", $step), 'error');
            $this->writeOutput(implode("\n", $errors), 'error');
        }
        return false;
    }


    /**
    * Load the rebuild info config.
    *
    * @return array
    *   An array generated by parsing the rebuild info file.
    */
    public function getConfig()
    {
        return self::$config;
    }

    public function setConfig()
    {
        $env = $this->getEnvironment();
        $rebuild_config_path = $env['path-aliases']['%rebuild'];
        // Check if the file exists.
        if (!file_exists($rebuild_config_path)) {
            // return error.
        }

        // Check if file is YAML format.
        $yaml = new Parser();
        try {
            $config = $yaml->parse(file_get_contents($rebuild_config_path));
            // Allow overriding the default target.
            $config['general']['target'] = self::$target;
            // Load overrides.
            self::$config = $config;
            $this->setConfigOverrides();
            return $this;
        } catch (ParseException $e) {
            // drush_set_error(dt("Unable to parse the YAML string: %s", array('%s' => $e->getMessage())));
        }

        return true;
    }

    public function setTarget($target)
    {
        self::$target = $target;
    }

    public function setEnvironment()
    {
        self::$drush->runCommand('@none', 'site-alias', array($this->getTarget()));
        if (self::$drush->getErrorStatus() == 1) {
            $output = $this->getOutputHandler();
            $output->writeln(sprintf('<error>%s</error>', self::$drush->getErrorLogString()));
            return false;
        }
        $backend_output = self::$drush->getParsedBackendOutput();
        self::$environment = array_shift($backend_output['object']);
        return true;
    }

    protected function getConfigOverridesPath()
    {
        $rebuild_config = $this->getConfig();
        // Check if the overrides file is defined as a full path.
        if (file_exists($rebuild_config['general']['overrides'])) {
            return $rebuild_config['general']['overrides'];
        }
        // If not a full path, check if it is in the same directory with the main
        // rebuild mainfest.
        $rebuild_config_path = self::$environment['path-aliases']['%rebuild'];
        // Get directory of rebuild.info
        $rebuild_conf_dir = str_replace(basename(self::$environment['path-aliases']['%rebuild']), '', $rebuild_config_path);
        if (file_exists($rebuild_conf_dir . '/' . $rebuild_config['general']['overrides'])) {
            return $rebuild_conf_dir . '/' . $rebuild_config['general']['overrides'];
        }
        // Could not find the file, return FALSE.
        return false;
    }

    public function setConfigOverrides()
    {
        $rebuild_config = self::$config;
        if (!isset($rebuild_config['general']['overrides'])) {
            return;
        }
        if ($overrides_path = $this->getConfigOverridesPath()) {
            $yaml = new Parser();
            if ($rebuild_overrides = $yaml->parse(file_get_contents($overrides_path))) {
                // drush_log(dt('Loading config overrides from !file', array('!file' => $rebuild_config['general']['overrides'])), 'success');
                $rebuild_config = array_merge_recursive($rebuild_config, $rebuild_overrides);
                $this->setConfig($rebuild_config);
                return true;
            } else {
                // return drush_set_error(dt('Failed to load overrides file! Check that it is valid YAML format.'));
            }
        } else {
            // return drush_set_error(dt('Could not load the overrides file.'));
        }
    }

    public function setOutputHandler($output)
    {
        self::$outputHandler = $output;
    }

    public function writeOutput($message, $type)
    {
        $type_start = sprintf('<%s>', $type);
        $type_end = sprintf('</%s>', $type);
        $output = $this->getOutputHandler();
        $output->writeln(sprintf('%s%s%s', $type_start, $message, $type_end));
        return true;
    }

    public function getTarget()
    {
        return self::$target;
    }

    public function getEnvironment()
    {
        return self::$environment;
    }

    public function getOutputHandler()
    {
        return self::$outputHandler;
    }

    public function getDrush()
    {
        return self::$drush;
    }
}
